// <auto-generated />
using System;
using DataAccessLogic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLogic.Migrations
{
    [DbContext(typeof(P0DatabaseContext))]
    partial class P0DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("CurrentCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "Customer_UN")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Models.LineItems", b =>
                {
                    b.Property<int>("StoreID")
                        .HasColumnType("int")
                        .HasColumnName("StoreID");

                    b.Property<int>("ProductID")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("ProductEstablishId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreID", "ProductID")
                        .HasName("PK__Stock__F0C23C8FFE8CD921");

                    b.HasIndex("ProductEstablishId");

                    b.HasIndex("ProductID");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Models.OrderLines", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReferenceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("LineQuantity")
                        .HasColumnType("int")
                        .HasColumnName("line_quantity");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreID");

                    b.HasKey("ReferenceId")
                        .HasName("PK__OrderHis__E1A99A79D614F7ED");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreID");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.HasKey("OrderId")
                        .HasName("PK__OrdersRe__C3905BCF362EFFB7");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("OrdersRecords");
                });

            modelBuilder.Entity("Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16,2)")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoreID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__StoreFro__3B82F0E1A4CC44F6");

                    b.ToTable("StoreFront");
                });

            modelBuilder.Entity("Models.LineItems", b =>
                {
                    b.HasOne("Models.Products", "ProductEstablish")
                        .WithMany()
                        .HasForeignKey("ProductEstablishId");

                    b.HasOne("Models.Products", "Product_obj")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK__Stock__ProductID__114A936A")
                        .IsRequired();

                    b.HasOne("Models.StoreFront", "Store_obj")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreID")
                        .HasConstraintName("FK__Stock__StoreID__10566F31")
                        .IsRequired();

                    b.Navigation("Product_obj");

                    b.Navigation("ProductEstablish");

                    b.Navigation("Store_obj");
                });

            modelBuilder.Entity("Models.OrderLines", b =>
                {
                    b.HasOne("Models.Customer", "Customer_obj")
                        .WithMany("orderline_")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__OrderHist__Custo__1AD3FDA4")
                        .IsRequired();

                    b.HasOne("Models.Orders", "Order_obj")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderHist__Order__19DFD96B")
                        .IsRequired();

                    b.HasOne("Models.Products", "Product_obj")
                        .WithMany("OrderLine_")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__OrderHist__Produ__1CBC4616")
                        .IsRequired();

                    b.HasOne("Models.StoreFront", "Store_obj")
                        .WithMany("orderline_")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__OrderHist__Store__1BC821DD")
                        .IsRequired();

                    b.Navigation("Customer_obj");

                    b.Navigation("Order_obj");

                    b.Navigation("Product_obj");

                    b.Navigation("Store_obj");
                });

            modelBuilder.Entity("Models.Orders", b =>
                {
                    b.HasOne("Models.Customer", "Customer_obj")
                        .WithMany("MyOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__OrdersRec__Custo__160F4887")
                        .IsRequired();

                    b.HasOne("Models.StoreFront", "Store_obj")
                        .WithMany("OrdersRecords")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__OrdersRec__Store__17036CC0")
                        .IsRequired();

                    b.Navigation("Customer_obj");

                    b.Navigation("Store_obj");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("MyOrders");

                    b.Navigation("orderline_");
                });

            modelBuilder.Entity("Models.Orders", b =>
                {
                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("Models.Products", b =>
                {
                    b.Navigation("OrderLine_");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Navigation("orderline_");

                    b.Navigation("OrdersRecords");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
